"""create_initial_schema

Revision ID: 1a2a9668d090
Revises: 
Create Date: 2025-08-25 00:43:57.544662

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1a2a9668d090'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('parent_category_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['parent_category_id'], ['categories.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name='uq_category_name')
    )
    op.create_index('idx_category_name', 'categories', ['name'], unique=False)
    op.create_table('users',
    sa.Column('db_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.Column('last_login_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('db_id'),
    sa.UniqueConstraint('email', name='uq_user_email'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('username', name='uq_user_username')
    )
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.create_table('accounts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('account_name', sa.String(length=255), nullable=False),
    sa.Column('account_type', sa.Enum('CHECKING', 'SAVINGS', 'CREDIT_CARD', 'INVESTMENT', 'LOAN', 'OTHER', name='accounttype'), nullable=False),
    sa.Column('institution_name', sa.String(length=255), nullable=False),
    sa.Column('account_number_last4', sa.String(length=4), nullable=True),
    sa.Column('original_principal', sa.DECIMAL(precision=15, scale=2), nullable=True),
    sa.Column('minimum_payment', sa.DECIMAL(precision=15, scale=2), nullable=True),
    sa.Column('interest_rate', sa.DECIMAL(precision=5, scale=4), nullable=True),
    sa.Column('interest_rate_type', sa.String(length=20), nullable=True),
    sa.Column('balance', sa.DECIMAL(precision=15, scale=2), nullable=False),
    sa.Column('balance_last_updated', sa.DateTime(), nullable=True),
    sa.Column('comments', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.db_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'account_name', name='uq_user_account_name')
    )
    op.create_table('budgets',
    sa.Column('budget_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('budget_name', sa.String(length=255), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.db_id'], ),
    sa.PrimaryKeyConstraint('budget_id'),
    sa.UniqueConstraint('user_id', 'budget_name', name='uq_user_budget_name')
    )
    op.create_table('debt_repayment_plans',
    sa.Column('plan_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('plan_name', sa.String(length=255), nullable=False),
    sa.Column('strategy', sa.Enum('AVALANCHE', 'SNOWBALL', 'CUSTOM', name='debtstrategy'), nullable=False),
    sa.Column('target_payoff_date', sa.Date(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.db_id'], ),
    sa.PrimaryKeyConstraint('plan_id'),
    sa.UniqueConstraint('user_id', 'plan_name', name='uq_user_debt_plan_name')
    )
    op.create_table('financial_plans',
    sa.Column('plan_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('plan_name', sa.String(length=255), nullable=False),
    sa.Column('monthly_income', sa.DECIMAL(precision=15, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.db_id'], ),
    sa.PrimaryKeyConstraint('plan_id'),
    sa.UniqueConstraint('user_id', 'plan_name', name='uq_user_financial_plan_name')
    )
    op.create_table('tags',
    sa.Column('tag_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('tag_name', sa.String(length=100), nullable=False),
    sa.Column('color', sa.String(length=7), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.db_id'], ),
    sa.PrimaryKeyConstraint('tag_id'),
    sa.UniqueConstraint('user_id', 'tag_name', name='uq_user_tag_name')
    )
    op.create_table('budget_categories',
    sa.Column('budget_category_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('budget_id', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('allocated_amount', sa.DECIMAL(precision=15, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['budget_id'], ['budgets.budget_id'], ),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.PrimaryKeyConstraint('budget_category_id'),
    sa.UniqueConstraint('budget_id', 'category_id', name='uq_budget_category')
    )
    op.create_table('debt_plan_account_links',
    sa.Column('plan_id', sa.Integer(), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['plan_id'], ['debt_repayment_plans.plan_id'], ),
    sa.PrimaryKeyConstraint('plan_id', 'account_id')
    )
    op.create_table('debt_repayment_schedules',
    sa.Column('schedule_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('payment_month', sa.Date(), nullable=False),
    sa.Column('scheduled_payment_amount', sa.DECIMAL(precision=15, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.db_id'], ),
    sa.PrimaryKeyConstraint('schedule_id'),
    sa.UniqueConstraint('user_id', 'account_id', 'payment_month', name='uq_user_account_month_payment')
    )
    op.create_table('financial_plan_entries',
    sa.Column('entry_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('plan_id', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('monthly_amount', sa.DECIMAL(precision=15, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['plan_id'], ['financial_plans.plan_id'], ),
    sa.PrimaryKeyConstraint('entry_id'),
    sa.UniqueConstraint('plan_id', 'category_id', name='uq_plan_entry_category')
    )
    op.create_table('investment_holdings',
    sa.Column('holding_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('symbol', sa.String(length=20), nullable=False),
    sa.Column('quantity', sa.DECIMAL(precision=15, scale=6), nullable=False),
    sa.Column('average_cost_basis', sa.DECIMAL(precision=15, scale=4), nullable=True),
    sa.Column('current_price', sa.DECIMAL(precision=15, scale=4), nullable=True),
    sa.Column('last_price_update', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.PrimaryKeyConstraint('holding_id'),
    sa.UniqueConstraint('account_id', 'symbol', name='uq_account_symbol')
    )
    op.create_index('idx_holdings_account', 'investment_holdings', ['account_id'], unique=False)
    op.create_index('idx_holdings_symbol', 'investment_holdings', ['symbol'], unique=False)
    op.create_table('transactions',
    sa.Column('db_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('external_transaction_id', sa.String(length=255), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('subcategory_id', sa.Integer(), nullable=True),
    sa.Column('transaction_hash', sa.String(length=64), nullable=False),
    sa.Column('source_type', sa.Enum('CSV', 'PDF', 'MANUAL', 'API', name='sourcetype'), nullable=False),
    sa.Column('raw_data_json', sa.JSON(), nullable=True),
    sa.Column('transaction_date', sa.Date(), nullable=False),
    sa.Column('posted_date', sa.Date(), nullable=True),
    sa.Column('amount', sa.DECIMAL(precision=15, scale=2), nullable=False),
    sa.Column('transaction_type', sa.Enum('DEBIT', 'PURCHASE', 'CREDIT', 'TRANSFER', 'DEPOSIT', 'WITHDRAWAL', 'FEE', 'INTEREST', name='transactiontype'), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('parsed_description', sa.Text(), nullable=True),
    sa.Column('merchant_name', sa.String(length=255), nullable=True),
    sa.Column('comments', sa.Text(), nullable=True),
    sa.Column('institution_name', sa.String(length=255), nullable=True),
    sa.Column('account_number_last4', sa.String(length=4), nullable=True),
    sa.Column('needs_review', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['subcategory_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.db_id'], ),
    sa.PrimaryKeyConstraint('db_id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('user_id', 'transaction_hash', name='uq_user_transaction_hash')
    )
    op.create_index('idx_transactions_date', 'transactions', ['transaction_date'], unique=False)
    op.create_index('idx_transactions_external_id', 'transactions', ['external_transaction_id'], unique=False)
    op.create_index('idx_transactions_user_account', 'transactions', ['user_id', 'account_id'], unique=False)
    op.create_index('idx_transactions_user_date', 'transactions', ['user_id', 'transaction_date'], unique=False)
    op.create_table('debt_payments',
    sa.Column('payment_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('loan_account_id', sa.Integer(), nullable=False),
    sa.Column('payment_source_account_id', sa.Integer(), nullable=True),
    sa.Column('transaction_id', sa.Integer(), nullable=True),
    sa.Column('payment_amount', sa.DECIMAL(precision=15, scale=2), nullable=False),
    sa.Column('principal_amount', sa.DECIMAL(precision=15, scale=2), nullable=True),
    sa.Column('interest_amount', sa.DECIMAL(precision=15, scale=2), nullable=True),
    sa.Column('remaining_balance_after_payment', sa.DECIMAL(precision=15, scale=2), nullable=True),
    sa.Column('payment_date', sa.Date(), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['loan_account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['payment_source_account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.db_id'], ),
    sa.PrimaryKeyConstraint('payment_id')
    )
    op.create_index('idx_debt_payments_date', 'debt_payments', ['payment_date'], unique=False)
    op.create_index('idx_debt_payments_loan_account', 'debt_payments', ['loan_account_id'], unique=False)
    op.create_index('idx_debt_payments_source_account', 'debt_payments', ['payment_source_account_id'], unique=False)
    op.create_index('idx_debt_payments_transaction', 'debt_payments', ['transaction_id'], unique=False)
    op.create_table('investment_transactions',
    sa.Column('investment_transaction_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=True),
    sa.Column('holding_id', sa.Integer(), nullable=True),
    sa.Column('transaction_type', sa.Enum('BUY', 'SELL', 'DIVIDEND', 'INTEREST', 'SPLIT', 'MERGER', 'SPINOFF', 'REINVESTMENT', name='investmenttransactiontype'), nullable=False),
    sa.Column('symbol', sa.String(length=20), nullable=False),
    sa.Column('quantity', sa.DECIMAL(precision=15, scale=6), nullable=True),
    sa.Column('price_per_share', sa.DECIMAL(precision=15, scale=4), nullable=True),
    sa.Column('total_amount', sa.DECIMAL(precision=15, scale=2), nullable=False),
    sa.Column('fees', sa.DECIMAL(precision=15, scale=2), nullable=True),
    sa.Column('transaction_date', sa.Date(), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['holding_id'], ['investment_holdings.holding_id'], ),
    sa.PrimaryKeyConstraint('investment_transaction_id')
    )
    op.create_index('idx_investment_transactions_account_date', 'investment_transactions', ['account_id', 'transaction_date'], unique=False)
    op.create_index('idx_investment_transactions_date', 'investment_transactions', ['transaction_date'], unique=False)
    op.create_index('idx_investment_transactions_holding', 'investment_transactions', ['holding_id'], unique=False)
    op.create_index('idx_investment_transactions_type', 'investment_transactions', ['transaction_type'], unique=False)
    op.create_table('transaction_relationships',
    sa.Column('relationship_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('from_transaction_id', sa.Integer(), nullable=False),
    sa.Column('to_transaction_id', sa.Integer(), nullable=False),
    sa.Column('relationship_type', sa.Enum('OFFSETS', 'REFUNDS', 'SPLITS', 'FEES_FOR', 'REVERSES', name='relationshiptype'), nullable=False),
    sa.Column('amount_allocated', sa.DECIMAL(precision=15, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['from_transaction_id'], ['transactions.db_id'], ),
    sa.ForeignKeyConstraint(['to_transaction_id'], ['transactions.db_id'], ),
    sa.PrimaryKeyConstraint('relationship_id'),
    sa.UniqueConstraint('from_transaction_id', 'to_transaction_id', 'relationship_type', name='uq_transaction_relationship')
    )
    op.create_index('idx_rel_from_transaction', 'transaction_relationships', ['from_transaction_id'], unique=False)
    op.create_index('idx_rel_to_transaction', 'transaction_relationships', ['to_transaction_id'], unique=False)
    op.create_index('idx_rel_type', 'transaction_relationships', ['relationship_type'], unique=False)
    op.create_table('transaction_tags',
    sa.Column('transaction_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.tag_id'], ),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.db_id'], ),
    sa.PrimaryKeyConstraint('transaction_id', 'tag_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transaction_tags')
    op.drop_index('idx_rel_type', table_name='transaction_relationships')
    op.drop_index('idx_rel_to_transaction', table_name='transaction_relationships')
    op.drop_index('idx_rel_from_transaction', table_name='transaction_relationships')
    op.drop_table('transaction_relationships')
    op.drop_index('idx_investment_transactions_type', table_name='investment_transactions')
    op.drop_index('idx_investment_transactions_holding', table_name='investment_transactions')
    op.drop_index('idx_investment_transactions_date', table_name='investment_transactions')
    op.drop_index('idx_investment_transactions_account_date', table_name='investment_transactions')
    op.drop_table('investment_transactions')
    op.drop_index('idx_debt_payments_transaction', table_name='debt_payments')
    op.drop_index('idx_debt_payments_source_account', table_name='debt_payments')
    op.drop_index('idx_debt_payments_loan_account', table_name='debt_payments')
    op.drop_index('idx_debt_payments_date', table_name='debt_payments')
    op.drop_table('debt_payments')
    op.drop_index('idx_transactions_user_date', table_name='transactions')
    op.drop_index('idx_transactions_user_account', table_name='transactions')
    op.drop_index('idx_transactions_external_id', table_name='transactions')
    op.drop_index('idx_transactions_date', table_name='transactions')
    op.drop_table('transactions')
    op.drop_index('idx_holdings_symbol', table_name='investment_holdings')
    op.drop_index('idx_holdings_account', table_name='investment_holdings')
    op.drop_table('investment_holdings')
    op.drop_table('financial_plan_entries')
    op.drop_table('debt_repayment_schedules')
    op.drop_table('debt_plan_account_links')
    op.drop_table('budget_categories')
    op.drop_table('tags')
    op.drop_table('financial_plans')
    op.drop_table('debt_repayment_plans')
    op.drop_table('budgets')
    op.drop_table('accounts')
    op.drop_index('idx_users_email', table_name='users')
    op.drop_table('users')
    op.drop_index('idx_category_name', table_name='categories')
    op.drop_table('categories')
    # ### end Alembic commands ###
